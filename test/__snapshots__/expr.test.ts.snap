// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`expr operators parses != operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "!=",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses % operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "%",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses & operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "&",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses * operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "*",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses + operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "+",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses / operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "/",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses < operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "<",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses << operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "<<",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses <= operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "<=",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses <> operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "<>",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses = operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "=",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses > operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": ">",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses >= operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": ">=",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses >> operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": ">>",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses ^ operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "^",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses | operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "|",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses ~ operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "~",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses ~ operator 2`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "~",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses - operator 1`] = `
{
  "left": {
    "text": "5",
    "type": "number",
  },
  "operator": "-",
  "right": {
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses DIV operator 1`] = `
{
  "left": {
    "text": "8",
    "type": "number",
  },
  "operator": [
    {
      "text": "DIV",
      "type": "keyword",
    },
  ],
  "right": {
    "text": "4",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses IS NOT operator 1`] = `
{
  "left": {
    "text": "7",
    "type": "number",
  },
  "operator": [
    {
      "text": "IS",
      "type": "keyword",
    },
    {
      "text": "NOT",
      "type": "keyword",
    },
  ],
  "right": {
    "text": "5",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses IS NOT operator with comments 1`] = `
{
  "left": {
    "text": "7",
    "trailingComments": [
      {
        "text": "/*c1*/",
        "type": "block_comment",
      },
    ],
    "type": "number",
  },
  "operator": [
    {
      "text": "IS",
      "trailingComments": [
        {
          "text": "/*c2*/",
          "type": "block_comment",
        },
      ],
      "type": "keyword",
    },
    {
      "text": "NOT",
      "type": "keyword",
    },
  ],
  "right": {
    "leadingComments": [
      {
        "text": "/*c3*/",
        "type": "block_comment",
      },
    ],
    "text": "5",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses IS operator 1`] = `
{
  "left": {
    "text": "7",
    "type": "number",
  },
  "operator": [
    {
      "text": "IS",
      "type": "keyword",
    },
  ],
  "right": {
    "text": "5",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses IS operator with comments 1`] = `
{
  "left": {
    "text": "7",
    "trailingComments": [
      {
        "text": "/*c1*/",
        "type": "block_comment",
      },
    ],
    "type": "number",
  },
  "operator": [
    {
      "text": "IS",
      "type": "keyword",
    },
  ],
  "right": {
    "leadingComments": [
      {
        "text": "/*c2*/",
        "type": "block_comment",
      },
    ],
    "text": "5",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses addition with comments 1`] = `
{
  "left": {
    "text": "6",
    "trailingComments": [
      {
        "text": "/* com1 */",
        "type": "block_comment",
      },
    ],
    "type": "number",
  },
  "operator": "+",
  "right": {
    "leadingComments": [
      {
        "text": "/* com2 */",
        "type": "block_comment",
      },
    ],
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses chain of addition and subtraction 1`] = `
{
  "left": {
    "left": {
      "text": "5",
      "type": "number",
    },
    "operator": "+",
    "right": {
      "text": "6",
      "type": "number",
    },
    "type": "binary_expr",
  },
  "operator": "-",
  "right": {
    "text": "8",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses chain of multiplication and division 1`] = `
{
  "left": {
    "left": {
      "text": "2",
      "type": "number",
    },
    "operator": "*",
    "right": {
      "text": "7",
      "type": "number",
    },
    "type": "binary_expr",
  },
  "operator": "/",
  "right": {
    "text": "3",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses comparison with comments 1`] = `
{
  "left": {
    "text": "6",
    "trailingComments": [
      {
        "text": "/* com1 */",
        "type": "block_comment",
      },
    ],
    "type": "number",
  },
  "operator": "<",
  "right": {
    "leadingComments": [
      {
        "text": "/* com2 */",
        "type": "block_comment",
      },
    ],
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators parses multiplication with comments 1`] = `
{
  "left": {
    "text": "6",
    "trailingComments": [
      {
        "text": "/* com1 */",
        "type": "block_comment",
      },
    ],
    "type": "number",
  },
  "operator": "*",
  "right": {
    "leadingComments": [
      {
        "text": "/* com2 */",
        "type": "block_comment",
      },
    ],
    "text": "7",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators recognizes lowercase DIV operator 1`] = `
{
  "left": {
    "text": "8",
    "type": "number",
  },
  "operator": [
    {
      "text": "div",
      "type": "keyword",
    },
  ],
  "right": {
    "text": "4",
    "type": "number",
  },
  "type": "binary_expr",
}
`;

exports[`expr operators treats multiplication with higher precedence than addition 1`] = `
{
  "left": {
    "text": "6",
    "type": "number",
  },
  "operator": "+",
  "right": {
    "left": {
      "text": "7",
      "type": "number",
    },
    "operator": "*",
    "right": {
      "text": "3",
      "type": "number",
    },
    "type": "binary_expr",
  },
  "type": "binary_expr",
}
`;
